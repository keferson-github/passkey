import { createClient } from '@supabase/supabase-js';

async function verificarEstruturaBanco() {
  try {
    console.log('üîç Verificando estrutura do banco de dados Supabase...\n');
    
    const supabaseUrl = "https://oyjpnwjwawmgecobeebl.supabase.co";
    const supabaseAnonKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im95anBud2p3YXdtZ2Vjb2JlZWJsIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3NjkwNzQsImV4cCI6MjA2ODM0NTA3NH0.bChgjIpJbVlarNb1yi7Z2nkUXHQduy32CLRj8hYzyyA";
    
    const supabase = createClient(supabaseUrl, supabaseAnonKey);
    
    // Tentar diferentes abordagens para verificar usu√°rios
    console.log('üìã Tentando verificar diferentes tabelas...\n');
    
    // 1. Verificar tabela profiles
    try {
      const { data, error, count } = await supabase
        .from('profiles')
        .select('*', { count: 'exact' })
        .limit(5);
      
      console.log('‚úÖ Tabela profiles:');
      console.log(`   Registros: ${count || 0}`);
      if (data && data.length > 0) {
        console.log('   Dados encontrados:', data);
      }
    } catch (err) {
      console.log('‚ùå Erro ao acessar tabela profiles:', err.message);
    }
    
    // 2. Verificar tabela users (se existir)
    try {
      const { data, error, count } = await supabase
        .from('users')
        .select('*', { count: 'exact' })
        .limit(5);
      
      console.log('\n‚úÖ Tabela users:');
      console.log(`   Registros: ${count || 0}`);
      if (data && data.length > 0) {
        console.log('   Dados encontrados:', data);
      }
    } catch (err) {
      console.log('\n‚ùå Tabela users n√£o acess√≠vel:', err.message);
    }
    
    // 3. Verificar tabela auth_users (se existir)
    try {
      const { data, error, count } = await supabase
        .from('auth_users')
        .select('*', { count: 'exact' })
        .limit(5);
      
      console.log('\n‚úÖ Tabela auth_users:');
      console.log(`   Registros: ${count || 0}`);
      if (data && data.length > 0) {
        console.log('   Dados encontrados:', data);
      }
    } catch (err) {
      console.log('\n‚ùå Tabela auth_users n√£o acess√≠vel:', err.message);
    }
    
    // 4. Verificar sess√µes ativas
    try {
      const { data: { session } } = await supabase.auth.getSession();
      console.log('\nüîê Status da sess√£o atual:');
      if (session) {
        console.log('   ‚úÖ Sess√£o ativa encontrada');
        console.log(`   Usu√°rio: ${session.user.email}`);
        console.log(`   Expira em: ${new Date(session.expires_at * 1000).toLocaleString('pt-BR')}`);
      } else {
        console.log('   ‚ùå Nenhuma sess√£o ativa');
      }
    } catch (err) {
      console.log('\n‚ùå Erro ao verificar sess√£o:', err.message);
    }
    
    // 5. Verificar usu√°rio atual
    try {
      const { data: { user } } = await supabase.auth.getUser();
      console.log('\nüë§ Usu√°rio atual:');
      if (user) {
        console.log('   ‚úÖ Usu√°rio autenticado');
        console.log(`   ID: ${user.id}`);
        console.log(`   Email: ${user.email}`);
      } else {
        console.log('   ‚ùå Nenhum usu√°rio autenticado');
      }
    } catch (err) {
      console.log('\n‚ùå Erro ao verificar usu√°rio atual:', err.message);
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

verificarEstruturaBanco();